"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * 

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
https://openapi-generator.tech
o not edit the class manually.



var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Dossier = require("../model/Dossier");

var _Dossier2 = _interopRequireDefault(_Dossier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* Default service.
* @module api/DefaultApi
* @version 1.0-SNAPSHOT
*/
var DefaultApi = function () {

  /**
  * Constructs a new DefaultApi. 
  * @alias module:api/DefaultApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DefaultApi(apiClient) {
    _classCallCheck(this, DefaultApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * @param {String} fileCode 
   * @param {String} dossierKey 
   * @param {String} dossierPackage 
   * @param {String} dossierCode 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */


  _createClass(DefaultApi, [{
    key: "getContentsWithHttpInfo",
    value: function getContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode) {
      var postBody = null;
      // verify the required parameter 'fileCode' is set
      if (fileCode === undefined || fileCode === null) {
        throw new Error("Missing the required parameter 'fileCode' when calling getContents");
      }
      // verify the required parameter 'dossierKey' is set
      if (dossierKey === undefined || dossierKey === null) {
        throw new Error("Missing the required parameter 'dossierKey' when calling getContents");
      }
      // verify the required parameter 'dossierPackage' is set
      if (dossierPackage === undefined || dossierPackage === null) {
        throw new Error("Missing the required parameter 'dossierPackage' when calling getContents");
      }
      // verify the required parameter 'dossierCode' is set
      if (dossierCode === undefined || dossierCode === null) {
        throw new Error("Missing the required parameter 'dossierCode' when calling getContents");
      }

      var pathParams = {
        'fileCode': fileCode,
        'dossierKey': dossierKey,
        'dossierPackage': dossierPackage,
        'dossierCode': dossierCode
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;
      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}/dossierfiles/{fileCode}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * @param {String} fileCode 
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "getContents",
    value: function getContents(fileCode, dossierKey, dossierPackage, dossierCode) {
      return this.getContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dossier} and HTTP response
     */

  }, {
    key: "getDossierWithHttpInfo",
    value: function getDossierWithHttpInfo(dossierKey, dossierPackage, dossierCode) {
      var postBody = null;
      // verify the required parameter 'dossierKey' is set
      if (dossierKey === undefined || dossierKey === null) {
        throw new Error("Missing the required parameter 'dossierKey' when calling getDossier");
      }
      // verify the required parameter 'dossierPackage' is set
      if (dossierPackage === undefined || dossierPackage === null) {
        throw new Error("Missing the required parameter 'dossierPackage' when calling getDossier");
      }
      // verify the required parameter 'dossierCode' is set
      if (dossierCode === undefined || dossierCode === null) {
        throw new Error("Missing the required parameter 'dossierCode' when calling getDossier");
      }

      var pathParams = {
        'dossierKey': dossierKey,
        'dossierPackage': dossierPackage,
        'dossierCode': dossierCode
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json', 'application/xhtml+xml'];
      var returnType = _Dossier2.default;
      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dossier}
     */

  }, {
    key: "getDossier",
    value: function getDossier(dossierKey, dossierPackage, dossierCode) {
      return this.getDossierWithHttpInfo(dossierKey, dossierPackage, dossierCode).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} fileCode 
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "setContentsWithHttpInfo",
    value: function setContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts) {
      opts = opts || {};
      var postBody = opts['body'];
      // verify the required parameter 'fileCode' is set
      if (fileCode === undefined || fileCode === null) {
        throw new Error("Missing the required parameter 'fileCode' when calling setContents");
      }
      // verify the required parameter 'dossierKey' is set
      if (dossierKey === undefined || dossierKey === null) {
        throw new Error("Missing the required parameter 'dossierKey' when calling setContents");
      }
      // verify the required parameter 'dossierPackage' is set
      if (dossierPackage === undefined || dossierPackage === null) {
        throw new Error("Missing the required parameter 'dossierPackage' when calling setContents");
      }
      // verify the required parameter 'dossierCode' is set
      if (dossierCode === undefined || dossierCode === null) {
        throw new Error("Missing the required parameter 'dossierCode' when calling setContents");
      }

      var pathParams = {
        'fileCode': fileCode,
        'dossierKey': dossierKey,
        'dossierPackage': dossierPackage,
        'dossierCode': dossierCode
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;
      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}/dossierfiles/{fileCode}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * @param {String} fileCode 
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "setContents",
    value: function setContents(fileCode, dossierKey, dossierPackage, dossierCode, opts) {
      return this.setContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * @param {String} fileCode 
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */

  }, {
    key: "uploadContentsWithHttpInfo",
    value: function uploadContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'fileCode' is set
      if (fileCode === undefined || fileCode === null) {
        throw new Error("Missing the required parameter 'fileCode' when calling uploadContents");
      }
      // verify the required parameter 'dossierKey' is set
      if (dossierKey === undefined || dossierKey === null) {
        throw new Error("Missing the required parameter 'dossierKey' when calling uploadContents");
      }
      // verify the required parameter 'dossierPackage' is set
      if (dossierPackage === undefined || dossierPackage === null) {
        throw new Error("Missing the required parameter 'dossierPackage' when calling uploadContents");
      }
      // verify the required parameter 'dossierCode' is set
      if (dossierCode === undefined || dossierCode === null) {
        throw new Error("Missing the required parameter 'dossierCode' when calling uploadContents");
      }

      var pathParams = {
        'fileCode': fileCode,
        'dossierKey': dossierKey,
        'dossierPackage': dossierPackage,
        'dossierCode': dossierCode
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'file': opts['file']
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['*/*'];
      var returnType = null;
      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}/dossierfiles/{fileCode}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * @param {String} fileCode 
     * @param {String} dossierKey 
     * @param {String} dossierPackage 
     * @param {String} dossierCode 
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */

  }, {
    key: "uploadContents",
    value: function uploadContents(fileCode, dossierKey, dossierPackage, dossierCode, opts) {
      return this.uploadContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return DefaultApi;
}();

exports.default = DefaultApi;