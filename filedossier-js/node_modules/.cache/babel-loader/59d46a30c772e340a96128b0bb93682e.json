{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/**\n * \n * \n *\n * \n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nvar _ApiClient = require(\"../ApiClient\");\n\nvar _ApiClient2 = _interopRequireDefault(_ApiClient);\n\nvar _Dossier = require(\"../model/Dossier\");\n\nvar _Dossier2 = _interopRequireDefault(_Dossier);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n* Default service.\n* @module api/DefaultApi\n* @version 1.0-SNAPSHOT\n*/\n\n\nvar DefaultApi = function () {\n  /**\n  * Constructs a new DefaultApi. \n  * @alias module:api/DefaultApi\n  * @class\n  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n  * default to {@link module:ApiClient#instance} if unspecified.\n  */\n  function DefaultApi(apiClient) {\n    _classCallCheck(this, DefaultApi);\n\n    this.apiClient = apiClient || _ApiClient2.default.instance;\n  }\n  /**\n   * @param {String} fileCode \n   * @param {String} dossierKey \n   * @param {String} dossierPackage \n   * @param {String} dossierCode \n   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n   */\n\n\n  _createClass(DefaultApi, [{\n    key: \"getContentsWithHttpInfo\",\n    value: function getContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode) {\n      var postBody = null; // verify the required parameter 'fileCode' is set\n\n      if (fileCode === undefined || fileCode === null) {\n        throw new Error(\"Missing the required parameter 'fileCode' when calling getContents\");\n      } // verify the required parameter 'dossierKey' is set\n\n\n      if (dossierKey === undefined || dossierKey === null) {\n        throw new Error(\"Missing the required parameter 'dossierKey' when calling getContents\");\n      } // verify the required parameter 'dossierPackage' is set\n\n\n      if (dossierPackage === undefined || dossierPackage === null) {\n        throw new Error(\"Missing the required parameter 'dossierPackage' when calling getContents\");\n      } // verify the required parameter 'dossierCode' is set\n\n\n      if (dossierCode === undefined || dossierCode === null) {\n        throw new Error(\"Missing the required parameter 'dossierCode' when calling getContents\");\n      }\n\n      var pathParams = {\n        'fileCode': fileCode,\n        'dossierKey': dossierKey,\n        'dossierPackage': dossierPackage,\n        'dossierCode': dossierCode\n      };\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = [];\n      var contentTypes = [];\n      var accepts = ['*/*'];\n      var returnType = null;\n      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}/dossierfiles/{fileCode}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);\n    }\n    /**\n     * @param {String} fileCode \n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n  }, {\n    key: \"getContents\",\n    value: function getContents(fileCode, dossierKey, dossierPackage, dossierCode) {\n      return this.getContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    }\n    /**\n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Dossier} and HTTP response\n     */\n\n  }, {\n    key: \"getDossierWithHttpInfo\",\n    value: function getDossierWithHttpInfo(dossierKey, dossierPackage, dossierCode) {\n      var postBody = null; // verify the required parameter 'dossierKey' is set\n\n      if (dossierKey === undefined || dossierKey === null) {\n        throw new Error(\"Missing the required parameter 'dossierKey' when calling getDossier\");\n      } // verify the required parameter 'dossierPackage' is set\n\n\n      if (dossierPackage === undefined || dossierPackage === null) {\n        throw new Error(\"Missing the required parameter 'dossierPackage' when calling getDossier\");\n      } // verify the required parameter 'dossierCode' is set\n\n\n      if (dossierCode === undefined || dossierCode === null) {\n        throw new Error(\"Missing the required parameter 'dossierCode' when calling getDossier\");\n      }\n\n      var pathParams = {\n        'dossierKey': dossierKey,\n        'dossierPackage': dossierPackage,\n        'dossierCode': dossierCode\n      };\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = [];\n      var contentTypes = [];\n      var accepts = ['application/xml', 'application/json', 'application/xhtml+xml'];\n      var returnType = _Dossier2.default;\n      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);\n    }\n    /**\n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Dossier}\n     */\n\n  }, {\n    key: \"getDossier\",\n    value: function getDossier(dossierKey, dossierPackage, dossierCode) {\n      return this.getDossierWithHttpInfo(dossierKey, dossierPackage, dossierCode).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    }\n    /**\n     * @param {String} fileCode \n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @param {Object} opts Optional parameters\n     * @param {Object} opts.body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n  }, {\n    key: \"setContentsWithHttpInfo\",\n    value: function setContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts) {\n      opts = opts || {};\n      var postBody = opts['body']; // verify the required parameter 'fileCode' is set\n\n      if (fileCode === undefined || fileCode === null) {\n        throw new Error(\"Missing the required parameter 'fileCode' when calling setContents\");\n      } // verify the required parameter 'dossierKey' is set\n\n\n      if (dossierKey === undefined || dossierKey === null) {\n        throw new Error(\"Missing the required parameter 'dossierKey' when calling setContents\");\n      } // verify the required parameter 'dossierPackage' is set\n\n\n      if (dossierPackage === undefined || dossierPackage === null) {\n        throw new Error(\"Missing the required parameter 'dossierPackage' when calling setContents\");\n      } // verify the required parameter 'dossierCode' is set\n\n\n      if (dossierCode === undefined || dossierCode === null) {\n        throw new Error(\"Missing the required parameter 'dossierCode' when calling setContents\");\n      }\n\n      var pathParams = {\n        'fileCode': fileCode,\n        'dossierKey': dossierKey,\n        'dossierPackage': dossierPackage,\n        'dossierCode': dossierCode\n      };\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {};\n      var authNames = [];\n      var contentTypes = [];\n      var accepts = ['*/*'];\n      var returnType = null;\n      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}/dossierfiles/{fileCode}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);\n    }\n    /**\n     * @param {String} fileCode \n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @param {Object} opts Optional parameters\n     * @param {Object} opts.body \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n  }, {\n    key: \"setContents\",\n    value: function setContents(fileCode, dossierKey, dossierPackage, dossierCode, opts) {\n      return this.setContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    }\n    /**\n     * @param {String} fileCode \n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @param {Object} opts Optional parameters\n     * @param {File} opts.file \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response\n     */\n\n  }, {\n    key: \"uploadContentsWithHttpInfo\",\n    value: function uploadContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts) {\n      opts = opts || {};\n      var postBody = null; // verify the required parameter 'fileCode' is set\n\n      if (fileCode === undefined || fileCode === null) {\n        throw new Error(\"Missing the required parameter 'fileCode' when calling uploadContents\");\n      } // verify the required parameter 'dossierKey' is set\n\n\n      if (dossierKey === undefined || dossierKey === null) {\n        throw new Error(\"Missing the required parameter 'dossierKey' when calling uploadContents\");\n      } // verify the required parameter 'dossierPackage' is set\n\n\n      if (dossierPackage === undefined || dossierPackage === null) {\n        throw new Error(\"Missing the required parameter 'dossierPackage' when calling uploadContents\");\n      } // verify the required parameter 'dossierCode' is set\n\n\n      if (dossierCode === undefined || dossierCode === null) {\n        throw new Error(\"Missing the required parameter 'dossierCode' when calling uploadContents\");\n      }\n\n      var pathParams = {\n        'fileCode': fileCode,\n        'dossierKey': dossierKey,\n        'dossierPackage': dossierPackage,\n        'dossierCode': dossierCode\n      };\n      var queryParams = {};\n      var headerParams = {};\n      var formParams = {\n        'file': opts['file']\n      };\n      var authNames = [];\n      var contentTypes = ['multipart/form-data'];\n      var accepts = ['*/*'];\n      var returnType = null;\n      return this.apiClient.callApi('/dossiers/{dossierKey}/{dossierPackage}/{dossierCode}/dossierfiles/{fileCode}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);\n    }\n    /**\n     * @param {String} fileCode \n     * @param {String} dossierKey \n     * @param {String} dossierPackage \n     * @param {String} dossierCode \n     * @param {Object} opts Optional parameters\n     * @param {File} opts.file \n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}\n     */\n\n  }, {\n    key: \"uploadContents\",\n    value: function uploadContents(fileCode, dossierKey, dossierPackage, dossierCode, opts) {\n      return this.uploadContentsWithHttpInfo(fileCode, dossierKey, dossierPackage, dossierCode, opts).then(function (response_and_data) {\n        return response_and_data.data;\n      });\n    }\n  }]);\n\n  return DefaultApi;\n}();\n\nexports.default = DefaultApi;","map":null,"metadata":{},"sourceType":"script"}